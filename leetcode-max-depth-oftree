/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 class Pair{
    TreeNode node;
    int depth;
    Pair(TreeNode node, int depth){
        this.node = node;
        this.depth = depth;
    }
 }
class Solution {
    public int maxDepth(TreeNode root) {
        if(root == null){
            return 0;
        }
        Stack<Pair> stack = new Stack<>();
        stack.push(new Pair(root, 1));
        int maxDepth = 0;
        while(!stack.isEmpty()){
            Pair pair = stack.pop();
            TreeNode node =pair.node;
            int depth = pair.depth;
            maxDepth = Math.max(maxDepth, depth);
            if(node.left!=null){
                stack.push(new Pair(node.left, depth + 1));
            }
            if(node.right!=null){
                stack.push(new Pair(node.right, depth + 1));
            }
        }
        return maxDepth;
    }
    //  public int maxDepth(TreeNode root) {
    //     // Base case
    //     if(root == null){
    //         return 0;
    //     }
    //     // DFT
    //     return Math.max(maxDepth(root.left), maxDepth(root.right)) + 1;
    // //    int leftDepth =  maxDepth(root.left);
    // //     int rightDepth = maxDepth(root.right);
    // //     int max = Math.max(leftDepth, rightDepth);
    // //     return max + 1;
    //  }
    /*
    public int maxDepth(TreeNode root) {
        if(root == null){
            return 0;
        }
        // BFT
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        int level = 0;
        while(!queue.isEmpty()){
            int size = queue.size();
            
            for(int i = 1; i<=size; i++){
                TreeNode node = queue.poll();
                if(node.left!=null){
                    queue.add(node.left);
                }
                if(node.right!=null){
                    queue.add(node.right);
                }
            }
            level++;
        }
        return level;
    }*/
}
