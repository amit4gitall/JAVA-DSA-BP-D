/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public boolean hasPathSum(TreeNode root, int targetSum) {
        if(root == null){
                return false;
            }
            targetSum = targetSum - root.val;
            // check i am on the leaf node
            if(root.left == null && root.right == null){
                return targetSum == 0;
            }
            
           return  hasPathSum(root.left, targetSum ) || hasPathSum(root.right, targetSum );
    }
    /*
    public boolean hasPathSum(TreeNode root, int targetSum) {
        return hasPathSum(root, targetSum , 0);
    }
     public boolean hasPathSum(TreeNode root, int targetSum, int currentSum) {
            if(root == null){
                return false;
            }
            currentSum = currentSum + root.val;
            // check i am on the leaf node
            if(root.left == null && root.right == null){
                return targetSum == currentSum;
            }
            
           return  hasPathSum(root.left, targetSum , currentSum) || hasPathSum(root.right, targetSum , currentSum);
    }*/
}
